from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext
from services import search_products_db, create_order_db, get_user_orders_db
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "7993583222:AAF9hKB7P-l9VKy7tgsYc2luC2V3KziMStE"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
STATE_SEARCH = 1
STATE_ORDER = 2


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: CallbackContext):
    logger.error("Exception while handling an update:", exc_info=context.error)
    if isinstance(update, Update) and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
        "/search - –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "/order - –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n"
        "/history - –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"
    )


async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    context.user_data['state'] = STATE_SEARCH


async def order_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ê—Ä—Ç–∏–∫—É–ª –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê–¥—Ä–µ—Å –°–ø–æ—Å–æ–±–û–ø–ª–∞—Ç—ã\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 123 1 –ú–æ—Å–∫–≤–∞ –ö–∞—Ä—Ç–∞"
    )
    context.user_data['state'] = STATE_ORDER


async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = 1
        orders = get_user_orders_db(user_id)

        if not orders:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
            return

        response = []
        for order in orders:
            order_info = (
                f"üÜî –ó–∞–∫–∞–∑ #{order['id']}\n"
                f"üìÖ –î–∞—Ç–∞: {order['created_at']}\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {order['status']}\n"
                f"üí≥ –°—É–º–º–∞: {order['total']} —Ä—É–±.\n"
                f"üè† –ê–¥—Ä–µ—Å: {order['address']}\n"
                f"üí∏ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order['payment_method']}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )
            response.append(order_info)

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 3 –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç Telegram
        for i in range(0, len(response), 3):
            await update.message.reply_text("\n\n".join(response[i:i + 3]))

    except Exception as e:
        logger.error(f"History error: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')

    if state == STATE_SEARCH:
        await process_search(update, context)
    elif state == STATE_ORDER:
        await process_order(update, context)
    else:
        await update.message.reply_text("–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –ø–æ–º–æ—â–∏")


async def process_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.message.text
        products = search_products_db(query)

        if not products:
            await update.message.reply_text("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç
        response = []
        for product in products:
            product_info = (
                f"üÜî {product.id}\n"
                f"üì± {product.name}\n"
                f"üí∞ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
                f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: {product.stock} —à—Ç."
            )
            if product.description:
                product_info += f"\nüìù {product.description[:100]}..."
            response.append(product_info)

        await update.message.reply_text("\n\n".join(response))
    except Exception as e:
        logger.error(f"Search error: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤")
    finally:
        context.user_data.pop('state', None)


async def process_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        parts = update.message.text.split()
        if len(parts) < 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ê—Ä—Ç–∏–∫—É–ª –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê–¥—Ä–µ—Å –°–ø–æ—Å–æ–±–û–ø–ª–∞—Ç—ã")

        user_id = 1

        order_data = {
            "product_id": int(parts[0]),
            "quantity": int(parts[1]),
            "user_id": user_id,
            "address": " ".join(parts[2:-1]),
            "payment_method": parts[-1]
        }

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = create_order_db(**order_data)

        await update.message.reply_text(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order['id']} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
            f"üí∞ –°—É–º–º–∞: {order['total']} —Ä—É–±.\n"
            f"üè† –ê–¥—Ä–µ—Å: {order['address']}\n"
            f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order['payment_method']}"
        )
    except ValueError as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        logger.error(f"Order error: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
    finally:
        context.user_data.pop('state', None)


def main():
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("search", search_command))
    application.add_handler(CommandHandler("order", order_command))
    application.add_handler(CommandHandler("history", history_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    application.run_polling()


if __name__ == "__main__":
    main()